//https://sass-lang.com/documentation/breaking-changes/slash-div
//https://stackoverflow.com/questions/61330432/sasserror-there-is-no-module-with-the-namespace-math
@use "sass:math";
@import "../mixin";

.moz-color-picker {
  display: inline-block;
  /* Chrome */
  .vc-chrome {
    background: #fff;
    border-radius: 2px;
    box-shadow: 0 0 2px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3);
    box-sizing: initial;
    width: 225px;
    font-family: Menlo;
    background-color: #fff;
  }
  .vc-chrome-controls {
    @include flex-center-horizontal;
  }
  .vc-chrome-color-wrap {
    position: relative;
    width: 36px;
  }
  .vc-chrome-active-color {
    position: relative;
    width: 30px;
    height: 30px;
    border-radius: 15px;
    overflow: hidden;
    z-index: 1;
  }
  .vc-chrome-color-wrap .vc-checkerboard {
    width: 30px;
    height: 30px;
    border-radius: 15px;
    background-size: auto;
  }
  .vc-chrome-sliders {
    flex: 1;
  }
  .vc-chrome-fields-wrap {
    display: flex;
    padding-top: 16px;
  }
  .vc-chrome-fields {
    display: flex;
    margin-left: -6px;
    flex: 1;
  }
  .vc-chrome-field {
    padding-left: 6px;
    width: 100%;
  }
  .vc-chrome-toggle-btn {
    width: 32px;
    text-align: right;
    position: relative;
  }
  .vc-chrome-toggle-icon {
    margin-right: -4px;
    margin-top: 12px;
    cursor: pointer;
    position: relative;
    z-index: 2;
  }
  .vc-chrome-toggle-icon-highlight {
    position: absolute;
    width: 24px;
    height: 28px;
    background: #eee;
    border-radius: 4px;
    top: 10px;
    left: 12px;
  }
  .vc-chrome-hue-wrap {
    position: relative;
    height: 10px;
    margin-bottom: 8px;
  }
  .vc-chrome-alpha-wrap {
    position: relative;
    height: 10px;
  }
  .vc-chrome-hue-wrap .vc-hue {
    border-radius: 2px;
  }
  .vc-chrome-alpha-wrap .vc-alpha-gradient {
    border-radius: 2px;
  }
  .vc-chrome-hue-wrap .vc-hue-picker,
  .vc-chrome-alpha-wrap .vc-alpha-picker {
    width: 12px;
    height: 12px;
    border-radius: 6px;
    transform: translate(-6px, -2px);
    background-color: rgb(248, 248, 248);
    box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);
  }
  .vc-chrome-body {
    padding: 16px 16px 12px;
    background-color: var(--color-back);
  }
  .vc-chrome-saturation-wrap {
    width: 100%;
    padding-bottom: 55%;
    position: relative;
    border-radius: 2px 2px 0 0;
    overflow: hidden;
  }
  .vc-chrome-saturation-wrap .vc-saturation-circle {
    width: 12px;
    height: 12px;
  }
  .vc-chrome-fields .vc-input__input {
    font-size: 11px;
    color: var(--color-font3);
    width: 100%;
    border-radius: 2px;
    border: none;
    box-shadow: inset 0 0 0 1px var(--color-border2);
    height: 21px;
    text-align: center;
  }
  .vc-chrome-fields .vc-input__label {
    text-transform: uppercase;
    font-size: 11px;
    line-height: 11px;
    color: #969696;
    text-align: center;
    display: block;
    margin-top: 12px;
  }
  .vc-chrome__disable-alpha .vc-chrome-active-color {
    width: 18px;
    height: 18px;
  }
  .vc-chrome__disable-alpha .vc-chrome-color-wrap {
    width: 30px;
  }
  .vc-chrome__disable-alpha .vc-chrome-hue-wrap {
    margin-top: 4px;
    margin-bottom: 4px;
  }

  /*Alpha */
  .vc-alpha {
    position: absolute;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
  }
  .vc-alpha-checkboard-wrap {
    position: absolute;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
    overflow: hidden;
  }
  .vc-alpha-gradient {
    position: absolute;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
  }
  .vc-alpha-container {
    cursor: pointer;
    position: relative;
    z-index: 2;
    height: 100%;
    margin: 0 3px;
  }
  .vc-alpha-pointer {
    z-index: 2;
    position: absolute;
  }
  .vc-alpha-picker {
    cursor: pointer;
    width: 4px;
    border-radius: 1px;
    height: 8px;
    box-shadow: 0 0 2px rgba(0, 0, 0, 0.6);
    background: #fff;
    margin-top: 1px;
    transform: translateX(-2px);
  }

  /* Checkboard */
  .vc-checkerboard {
    position: absolute;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
    background-size: contain;
  }

  /* EditableInput */
  .vc-editable-input {
    position: relative;
    input {
      background-color: var(--color-back);
    }
  }
  .vc-input__input {
    padding: 0;
    border: 0;
    outline: none;
  }
  .vc-input__label {
    text-transform: capitalize;
  }

  /* Hue */
  .vc-hue {
    position: absolute;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
    border-radius: 2px;
  }
  .vc-hue--horizontal {
    background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
  }
  .vc-hue--vertical {
    background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
  }
  .vc-hue-container {
    cursor: pointer;
    margin: 0 2px;
    position: relative;
    height: 100%;
  }
  .vc-hue-pointer {
    z-index: 2;
    position: absolute;
  }
  .vc-hue-picker {
    cursor: pointer;
    margin-top: 1px;
    width: 4px;
    border-radius: 1px;
    height: 8px;
    box-shadow: 0 0 2px rgba(0, 0, 0, 0.6);
    background: #fff;
    transform: translateX(-2px);
  }

  /* Saturation */
  .vc-saturation,
  .vc-saturation--white,
  .vc-saturation--black {
    cursor: pointer;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  .vc-saturation--white {
    background: linear-gradient(to right, #fff, rgba(255, 255, 255, 0));
  }
  .vc-saturation--black {
    background: linear-gradient(to top, #000, rgba(0, 0, 0, 0));
  }
  .vc-saturation-pointer {
    cursor: pointer;
    position: absolute;
  }
  .vc-saturation-circle {
    cursor: head;
    width: 4px;
    height: 4px;
    box-shadow: 0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0, 0, 0, 0.3), 0 0 1px 2px rgba(0, 0, 0, 0.4);
    border-radius: 50%;
    transform: translate(-2px, -2px);
  }
}

.moz-color-picker {
  $color-bg: #ffffff;
  border: 1px solid #ccc;
  @mixin border-deco() {
    //Firefox bug: https://github.com/Sphinxxxx/vanilla-picker/issues/1
    //  outline: 1px solid silver;
    box-shadow: 0 0 0 1px silver;
  }

  .picker_wrapper {
    box-sizing: border-box;
    background: $color-bg;
    @include border-deco();

    cursor: default;
    font-family: sans-serif;
    color: #444;

    //Needed for the default popup behavior, where the parent is temporarily disabled via "pointer-events: none"
    pointer-events: auto;
    //The wrapper needs to be focusable (via `tabindex`), or else the popup loses focus
    //if you click anywhere on the picker's background, and closeHandler() closes the popup.
    //However, we don't want all the decoration:
    &:focus {
      outline: none;
    }

    //Reset custom styles on certain Firefox installs (#21)
    button,
    input {
      box-sizing: border-box;
      border: none;
      @include border-deco();

      outline: none;
      &:focus,
      &:active {
        box-shadow: 0 0 2px 1px dodgerblue;
      }
    }
    button {
      padding: 0.4em 0.6em;
      cursor: pointer;

      background-color: whitesmoke;
      background-image: linear-gradient(0deg, gainsboro, transparent);
      &:active {
        background-image: linear-gradient(0deg, transparent, gainsboro);
      }
      &:hover {
        background-color: white;
      }
    }
  }

  .picker_selector {
    position: absolute;
    z-index: 1; //On top of nearby sliders
    display: block;
    transform: translate(-50%, -50%);
    width: 6px;
    height: 6px;
    border: 3px solid #ffffff;
    box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.6);
    border-radius: 100%;

    cursor: pointer;
  }

  // .picker_slider .picker_selector {
  //   border-radius: 2px;
  // }

  .picker_hue {
    position: relative;
    background-image: linear-gradient(90deg, red, yellow, lime, cyan, blue, magenta, red);
    @include border-deco();
  }

  .picker_sl {
    width: 100%;
    $desat: #808080;
    //https://css-tricks.com/thing-know-gradients-transparent-black/
    $desat0: rgba($desat, 0);
    $white0: rgba(white, 0);
    $black0: rgba(black, 0);

    position: relative;

    @include border-deco();
    background-image:
        /*
          Different SL pickers
          https://en.wikipedia.org/wiki/HSL_and_HSV
        */
        
        //HSV
        //linear-gradient( 0deg, black, $black0),
        //linear-gradient(90deg, white, $white0);
        
        //HSL:
      linear-gradient(180deg, white, $white0 50%), linear-gradient(0deg, black, $black0 50%),
      linear-gradient(90deg, $desat, $desat0);

    //Hue, chroma, lightness (almost):
    //linear-gradient( 45deg, #eee   50%, transparent 50%), //Masking the triangle
    //linear-gradient(135deg, white   0%, $white0  50%),   //Lightness, white
    //linear-gradient(-45deg, black   0%, $black0  50%),  //Lightness, black
    //linear-gradient( 45deg, $desat 50%, $desat0 100%); //Saturation
  }

  .picker_alpha,
  .picker_sample {
    position: relative;

    //Fails on strict CSP settings..
    //  background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='2' height='2'%3E%3Cpath d='M1,0H0V1H2V2H1' fill='lightgrey'/%3E%3C/svg%3E") left top / contain white;
    $checker-dark: lightgrey;
    background: linear-gradient(45deg, $checker-dark 25%, transparent 25%, transparent 75%, $checker-dark 75%) 0 0 /
        1.6em 1.6em,
      linear-gradient(45deg, $checker-dark 25%, white 25%, white 75%, $checker-dark 75%) 0.8em 0.8em / 1.6em 1.6em;
    @include border-deco();

    .picker_selector {
      background: none;
    }
  }

  .picker_editor {
    input {
      font-family: monospace;
      padding: 0.2em 0.4em;
    }
  }

  .picker_sample {
    border: 2px solid #bababa;
    border-radius: 100%;

    &::before {
      content: "";
      position: absolute;
      display: block;
      width: 100%;
      height: 100%;
      background: currentColor;
      border-radius: 100%;
    }
  }

  .picker_wrapper.no_alpha .picker_alpha {
    display: none;
  }
  //Always keep the editor on-screen, for screen readers:
  .picker_wrapper.no_editor .picker_editor {
    position: absolute;
    z-index: -1;
    opacity: 0;
  }
  .picker_wrapper.no_cancel .picker_cancel {
    display: none;
  }

  .layout_default {
    $width-gutter: 1em;
    $width-slider: 2em;

    &.picker_wrapper {
      display: flex;
      flex-flow: row wrap;
      justify-content: space-between;
      align-items: stretch;

      font-size: 10px;
      width: 17.5em;
      // height: 18.3em;
      //Since we use "em"s for layout here, restore the correct font-size on elements with text:
      input,
      button {
        font-size: 1rem;
      }

      // padding: math.div($width-gutter, 2);
      padding: 0.7em;
      > * {
        margin: math.div($width-gutter, 2);
      }

      //https://stackoverflow.com/questions/29732575/line-break-in-multi-line-flexbox
      //We use this to insert a line break after .picker_alpha,
      //which lets us set .picker_sl to use all available space to the left of it (via flex-grow: 1),
      //and we don't have to calculate the exact width for .picker_sl.
      &::before {
        content: "";
        display: block;
        width: 100%;
        height: 0;
        order: 1;
      }
    }

    .picker_slider {
      padding: math.div($width-slider, 3);
      // padding: 2px;
    }

    .picker_hue,
    .picker_alpha {
      width: 100%;
    }

    .picker_sl {
      //width: calc(100% - #{2*$width-gutter} - #{$width-slider});
      flex: 1 1 auto;
      height: 135px;
      //With variable width, we need a pseudo-element to make it a square, whatever size:
      &::before {
        content: "";
        display: block;
        // padding-bottom: 100%;
      }
    }

    .picker_editor {
      order: 1;
      //width: 100%;
      // width: 6.5rem;
      height: 18px;
      width: 50%;

      input {
        width: 100%;
        height: 95%;
        vertical-align: middle;
      }
    }

    .picker_sample {
      order: 1;
      flex: 1 1 auto;
      vertical-align: middle;
    }

    .picker_done,
    .picker_cancel {
      order: 1;
    }

    .picker_editor {
      height: 18px;
    }

    .picker_done {
      button {
        height: 18px;
        border: 1px solid #90a255;
        color: #90a255;
        background: #fff;
        box-shadow: none;
        display: flex;
        padding: 8px 7px;
        align-items: center;
        vertical-align: middle;
        border-radius: 1px;
      }
    }
  }

  //The arrow is only used in popup mode
  .picker_arrow {
    position: absolute;

    //Don't cover the individual picker child elements.
    //We also need to add a z-index to the main .picker_wrapper below, so the arrow stays above/inside the wrapper:
    //https://stackoverflow.com/questions/1806421/how-to-get-a-parent-element-to-appear-above-child
    z-index: -1;
  }

  .picker_wrapper.popup {
    position: absolute;
    z-index: 2; //On top of non-popup pickers' selectors
    margin: 1.5em;

    &,
    .picker_arrow::before,
    .picker_arrow::after {
      background: $color-bg;
      box-shadow: 0 0 10px 1px rgba(0, 0, 0, 0.4);
    }

    .picker_arrow {
      width: 3em;
      height: 3em;
      margin: 0;

      &::before,
      &::after {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -99;
      }
      &::before {
        width: 100%;
        height: 100%;
        transform: skew(45deg);
        transform-origin: 0 100%;
      }
      &::after {
        width: 150%;
        height: 150%;
        box-shadow: none;
      }
    }
  }

  .popup.popup_top {
    bottom: 100%;
    left: 0;

    .picker_arrow {
      bottom: 0;
      left: 0;
      transform: rotate(-90deg);
    }
  }

  .popup.popup_bottom {
    top: 100%;
    left: 0;

    .picker_arrow {
      top: 0;
      left: 0;
      transform: rotate(90deg) scale(1, -1);
    }
  }

  .popup.popup_left {
    top: 0;
    right: 100%;

    .picker_arrow {
      top: 0;
      right: 0;
      transform: scale(-1, 1);
    }
  }

  .popup.popup_right {
    top: 0;
    left: 100%;

    .picker_arrow {
      top: 0;
      left: 0;
    }
  }
}
